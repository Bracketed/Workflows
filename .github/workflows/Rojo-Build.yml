name: Build Rojo Project
description: Build a Rojo Project with Aftman

on:
    workflow_call:
        inputs:
            project-name:
                description: The name of the project
                required: false
                default: '@${{ github.repository }}'
                type: string
            project-context:
                description: The working directory context of the Rojo build
                required: false
                default: .
                type: string
            project-output:
                description: The output file name of the Rojo build
                required: false
                default: '${{ github.repository_owner }}~${{ github.event.repository.name }}~${GITHUB_SHA:0:7}'
                type: string
            artifact-label:
                description: The label of the artifact published on a successful build
                required: false
                default: ${{ inputs.project-output }}
                type: string
            project-output-type:
                description: 'The output file type of the Rojo build (Options: `rbxm` (default), `rbxmx`, `rbxl`, `rbxlx`)'
                required: false
                default: rbxm
                type: string
            project-file:
                description: The project file for your Rojo project (default `default.project.json`)
                required: false
                default: default.project.json
                type: string
            lua-version:
                description: The Lua version to use when installing Lua to compile the project (default `5.1`)
                required: false
                default: 5.1
                type: number
            with-submodules:
                description: Whether to include submodules when checking out the repository (default `false`)
                required: false
                default: 'true'
                type: string
            repository-owner:
                description: The repository owner (default `bracketed`)
                required: false
                default: bracketed
                type: string
            operating-system:
                description: Base OS to use (default `ubuntu-latest`)
                required: false
                default: ubuntu-latest
                type: string
            checkout-depth:
                description: The depth of `actions/checkout` to fetch from (default `0`)
                required: false
                default: 0
                type: number
            checkout-ref:
                description: The branch reference `actions/checkout` will use to pull from (default `main`)
                required: false
                default: main
                type: string
            linters-enabled:
                description: Allow code linting pre-build (default `false`)
                required: false
                default: false
                type: boolean
            linter:
                description: The linter to use in your project pre-build lint stage (default `selene`, options, `'selene'`, `'stylua'`)
                required: false
                default: selene
                type: string
            linter-arguments:
                description: Extra arguments to supply to the chosen project linter (default `none`)
                required: false
                type: string
            linter-version:
                description: Set the version of your linter to install (default `latest`)
                required: false
                default: latest
                type: string
            summary:
                description: Display a build summary post-build (default `true`)
                required: false
                default: true
                type: boolean
        secrets:
            BRSFTWORKS_TOKEN:
                description: The token to authenticate with the GitHub repository used to bypass `main` branch checks
                required: true

concurrency:
    group: ${{ github.workflow }}|${{ github.head_ref || github.ref }}|${{ inputs.operating-system }}
    cancel-in-progress: true

jobs:
    build:
        name: Build Rojo Project and Upload to Artifacts
        runs-on: ${{ inputs.operating-system }}
        if: github.repository_owner == ${{ inputs.repository-owner }}
        outputs:
            build-time: ${{ steps.build-time.outputs.duration }}
            build-label: ${{ steps.prebuild-data.outputs.label }}
            build-file: ${{ steps.prebuild-data.outputs.file }}
            build-url: ${{ steps.postbuild-data.outputs.url }}
            build-sha: ${{ steps.postbuild-data.outputs.sha }}
            build-sha-small: ${{ steps.postbuild-data.outputs.small-sha }}
            build-name: ${{ steps.prebuild-data.outputs.name }}
            file-count: ${{ steps.prebuild-data.outputs.count }}
            build-logs-url: ${{ steps.postbuild-data.outputs.logs-url }}

        steps:
            - name: Checkout Project
              uses: actions/checkout@v4
              with:
                  fetch-depth: ${{ inputs.checkout-ref }}
                  ref: ${{ inputs.checkout-ref }}
                  token: ${{ secrets.BRSFTWORKS_TOKEN }}
                  submodules: ${{ inputs.with-submodules }}

            - name: Export Build Data to Outputs and Environment
              working-directory: ${{ inputs.project-context }}
              id: prebuild-data
              run: |
                  echo "file=${{ inputs.project-output }}.${{ inputs.project-output-type }}" >> $GITHUB_OUTPUT
                  echo "label=${{ inputs.project-output }}" >> $GITHUB_OUTPUT
                  echo "BUILD_LABEL=${{ inputs.project-output }}" >> $GITHUB_ENV
                  echo "BUILD_FILE=${{ inputs.project-output }}.${{ inputs.project-output-type }}" >> $GITHUB_ENV
                  echo "count=$(find . -type f \( -name "*.json" -o -name "*.lua" -o -name "*.luau" -o -name "*.txt" -o -name "*.rbxm" -o -name "*.rbxl" -o -name "*.rbxmx" -o -name "*.rbxlx" -o -name "*.toml" -o -name "*.csv" -o -name "*.mp3" -o -name "*.wav" -o -name "*.ogg" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.bmp" -o -name "*.gif" \) | wc -l)" >> $GITHUB_OUTPUT

                  if [ ! -f ${{ inputs.project-file }} ]; then
                    echo "name=${{ inputs.project-output }}" >> "$GITHUB_OUTPUT"
                    exit 0
                  fi

                  echo "name=$(jq -r .name ${{ inputs.project-file }})" >> $GITHUB_OUTPUT

            - name: Start Install & Build Timer
              run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

            - name: Initialise Windows Build Support
              uses: ilammy/msvc-dev-cmd@v1

            - name: Install LuaJIT
              uses: leafo/gh-actions-lua@v11
              with:
                  luaVersion: luajit

            - name: Install Lua Version ${{ inputs.lua-version }}
              uses: leafo/gh-actions-lua@v11
              with:
                  luaVersion: ${{ inputs.lua-version }}

            - name: Install Aftman
              uses: Bracketed/Workflows/actions/install-aftman@main
              with:
                  token: ${{ secrets.BRSFTWORKS_TOKEN }}
                  context: ${{ inputs.project-context }}

            - name: Install Rokit
              uses: Bracketed/Workflows/actions/install-rokit@main
              with:
                  install-context: ${{ inputs.project-context }}

            - name: Install Foreman
              uses: Roblox/setup-foreman@v3.2.0
              with:
                  token: ${{ secrets.BRSFTWORKS_TOKEN }}
                  working-directory: ${{ inputs.project-context }}
                  allow-external-github-orgs: true

            - name: Use the context as the CWD
              run: cd ${{ inputs.project-context }}

            - name: Lint with Selene
              uses: NTBBloodbath/selene-action@v1.0.0
              if: inputs.linters-enabled == true && inputs.linter == 'selene'
              with:
                  token: ${{ secrets.BRSFTWORKS_TOKEN }}
                  args: ${{ inputs.linter-arguments }} .
                  version: ${{ inputs.linter-version != 'latest' && inputs.linter-version || '' }}

            - name: Lint with StyLua
              uses: JohnnyMorganz/stylua-action@v4.0.0
              if: inputs.linters-enabled == true && inputs.linter == 'stylua'
              with:
                  token: ${{ secrets.BRSFTWORKS_TOKEN }}
                  args: ${{ inputs.linter-arguments }} .
                  version: ${{ inputs.linter-version }}

            - name: Build Project ${{ inputs.project-name }}
              run: rojo build --output $BUILD_FILE --verbose ${{ inputs.project-file }} 2>&1 | tee $BUILD_LABEL-BUILD.log

            - name: End Build Timer & Output Total Build Time
              id: build-time
              run: |
                  FINAL_TIME=$(date +%s)
                  RUNTIME=$((FINAL_TIME - START_TIME))
                  echo "duration=${RUNTIME}s" >> $GITHUB_OUTPUT

            - name: Upload Rojo Build
              id: build
              uses: actions/upload-artifact@v4.6.2
              with:
                  name: ${{ steps.prebuild-data.outputs.label }}-BUILD
                  path: ${{ steps.prebuild-data.outputs.file }}
                  if-no-files-found: error
                  overwrite: true
                  compression-level: 0
                  retention-days: 30

            - name: Upload Rojo Build Log
              uses: actions/upload-artifact@v4.6.2
              id: logs
              with:
                  name: ${{ steps.prebuild-data.outputs.label }}-LOG
                  path: ${{ steps.prebuild-data.outputs.label }}-BUILD.log
                  if-no-files-found: error
                  overwrite: true
                  compression-level: 0
                  retention-days: 30

            - name: Write Build Data to Output
              id: postbuild-data
              run: |
                  echo "url=${{ steps.build.outputs.artifact-url }}" >> $GITHUB_OUTPUT
                  echo "logs-url=${{ steps.logs.outputs.artifact-url }}" >> $GITHUB_OUTPUT
                  echo "sha=${{ steps.build.outputs.artifact-digest }}" >> $GITHUB_OUTPUT
                  echo "small-sha=$(echo ${{ steps.build.outputs.artifact-digest }} | cut -c1-7)" >> $GITHUB_OUTPUT

    summary:
        name: Generate final build summary info
        runs-on: ${{ inputs.operating-system }}
        needs: [build]
        if: github.repository_owner == ${{ inputs.repository-owner }} && inputs.summary == true

        steps:
            - name: Checkout Directory for Execution
              uses: actions/checkout@v4

            - name: Download Build Log Artifact
              uses: actions/download-artifact@v4.2.1
              with:
                  github-token: ${{ secrets.BRSFTWORKS_TOKEN }}

            - name: Generate Summary Values
              working-directory: ${{ github.workspace }}
              id: gen
              run: |
                  echo "size=$(stat --format=%s ${{ needs.build.outputs.build-label }}-BUILD/${{ needs.build.outputs.build-file }} | numfmt --to=iec --suffix=B | sed 's/\([0-9.]*\)\([A-Za-z]*\)$/\1 \2/' | sed 's/B/Bytes/' | sed 's/KiB/Kibibytes/' | sed 's/MiB/Mebibytes/' | sed 's/GiB/Gibibytes/' | sed 's/TiB/Tebibytes/' | sed 's/PiB/Pebibytes/')" >> $GITHUB_OUTPUT
                  echo "logs-size=$(stat --format=%s ${{ needs.build.outputs.build-label }}-LOG/${{ needs.build.outputs.build-label }}-BUILD.log | numfmt --to=iec --suffix=B | sed 's/\([0-9.]*\)\([A-Za-z]*\)$/\1 \2/' | sed 's/B/Bytes/' | sed 's/KiB/Kibibytes/' | sed 's/MiB/Mebibytes/' | sed 's/GiB/Gibibytes/' | sed 's/TiB/Tebibytes/' | sed 's/PiB/Pebibytes/')" >> $GITHUB_OUTPUT

            - name: Generate Build and Runtime Summary
              working-directory: ${{ github.workspace }}
              run: |
                  echo "<h2>Rojo Build summary</h2>" >> $GITHUB_STEP_SUMMARY
                  echo "<img src='https://rojo.space/assets/images/logo-151511d418967797798e02dc0ca74aaf.png' height='100' width='auto'/>" >> $GITHUB_STEP_SUMMARY
                  echo "<h3>Rojo Build Action by Bracketed Softworks</h3>" >> $GITHUB_STEP_SUMMARY
                  echo "<p>Quick Links - <a href="https://www.bracketed.co.uk">Bracketed Softworks</a> | <a href="https://rojo.space">Rojo</a> | <a href="https://github.com/Bracketed/Workflows"> More Workflows by Bracketed Softworks</a></p>" >> $GITHUB_STEP_SUMMARY
                  echo "<p>Here's the build summary for your Rojo project! The report folded up below will outline all the details of your build alongside the inputs that went into it.<br />Builds with this action are outputted to the Artifacts section of the action runner alongside its build logs from the Rojo Build command.</p>" >> $GITHUB_STEP_SUMMARY

                  echo "<p>⬇️ <b><a href='${{ needs.build.outputs.build-url }}'>${{ needs.build.outputs.build-file }}</a></b> (Compressed at ${{ steps.gen.outputs.size }})</p>" >> $GITHUB_STEP_SUMMARY
                  echo "<p>⬇️ <b><a href='${{ needs.build.outputs.build-logs-url }}'>${{ needs.build.outputs.build-label }}-BUILD.log</a></b> (Compressed at ${{ steps.gen.outputs.logs-size }})</p>" >> $GITHUB_STEP_SUMMARY

                  echo "<p>Find our tools useful? <a href="https://github.com/Bracketed/Workflows">Star our repository to support us!<a />" >> $GITHUB_STEP_SUMMARY
                  echo "<p>Build SHA: <code>${{ needs.build.outputs.build-sha }}</code></p>" >> $GITHUB_STEP_SUMMARY

                  echo "<table><tr><th>Hash</th><th>Project Name</th><th>Build Status</th><th>Project Files</th><th>Extension</th><th>Duration</th></tr><tr><td><code>${{ needs.build.outputs.build-sha-small }}</code></td><td>${{ needs.build.outputs.build-name }}</td><td>✅ completed</td><td>${{ needs.build.outputs.file-count }}</td><td><code>${{ inputs.project-output-type }}</code></td><td>${{ needs.build.outputs.build-time }}</td></tr></table>" >> $GITHUB_STEP_SUMMARY

                  echo "<details>" >> $GITHUB_STEP_SUMMARY
                  echo "<summary><b>Build Output</b></summary>" >> $GITHUB_STEP_SUMMARY
                  echo "<pre lang="txt"><code>" >> $GITHUB_STEP_SUMMARY
                  cat ${{ needs.build.outputs.build-label }}-LOG/${{ needs.build.outputs.build-label }}-BUILD.log >> $GITHUB_STEP_SUMMARY
                  echo "</pre></code>" >> $GITHUB_STEP_SUMMARY
                  echo "</details>" >> $GITHUB_STEP_SUMMARY

                  echo "<details>" >> $GITHUB_STEP_SUMMARY
                  echo "<summary><b>Workflow Inputs</b></summary>" >> $GITHUB_STEP_SUMMARY
                  echo "<pre lang="yaml"><code>" >> $GITHUB_STEP_SUMMARY
                  echo "inputs:" >> $GITHUB_STEP_SUMMARY
                  echo "    project-name: ${{ inputs.project-name }}" >> $GITHUB_STEP_SUMMARY
                  echo "    project-context: ${{ inputs.project-context }}" >> $GITHUB_STEP_SUMMARY
                  echo "    project-output: ${{ inputs.project-output }}" >> $GITHUB_STEP_SUMMARY
                  echo "    project-output-type: ${{ inputs.project-output-type }}" >> $GITHUB_STEP_SUMMARY
                  echo "    project-file: ${{ inputs.project-file }}" >> $GITHUB_STEP_SUMMARY
                  echo "    artifact-label: ${{ inputs.artifact-label }}" >> $GITHUB_STEP_SUMMARY
                  echo "    lua-version: ${{ inputs.lua-version }}" >> $GITHUB_STEP_SUMMARY
                  echo "    with-submodules: ${{ inputs.with-submodules }}" >> $GITHUB_STEP_SUMMARY
                  echo "    repository-owner: ${{ inputs.repository-owner }}" >> $GITHUB_STEP_SUMMARY
                  echo "    operating-system: ${{ inputs.operating-system }}" >> $GITHUB_STEP_SUMMARY
                  echo "    checkout-depth: ${{ inputs.checkout-depth }}" >> $GITHUB_STEP_SUMMARY
                  echo "    checkout-ref: ${{ inputs.checkout-ref }}" >> $GITHUB_STEP_SUMMARY
                  echo "    linters-enabled: ${{ inputs.linters-enabled }}" >> $GITHUB_STEP_SUMMARY
                  echo "    linter: ${{ inputs.linter }}" >> $GITHUB_STEP_SUMMARY
                  echo "    linter-arguments: ${{ inputs.linter-arguments }}" >> $GITHUB_STEP_SUMMARY
                  echo "    linter-version: ${{ inputs.linter-version }}" >> $GITHUB_STEP_SUMMARY
                  echo "    summary: ${{ inputs.summary }}" >> $GITHUB_STEP_SUMMARY
                  echo "secrets:" >> $GITHUB_STEP_SUMMARY
                  echo "    BRSFTWORKS_TOKEN: ***" >> $GITHUB_STEP_SUMMARY
                  echo "</pre></code>" >> $GITHUB_STEP_SUMMARY
                  echo "</details>" >> $GITHUB_STEP_SUMMARY
                  echo "<small><a href="https://github.com/Bracketed/Workflows"><i>Rojo Build Action by Bracketed Softworks, authored by ninjaninja140</i></a></small>" >> $GITHUB_STEP_SUMMARY
                  echo "<hr />" >> $GITHUB_STEP_SUMMARY
